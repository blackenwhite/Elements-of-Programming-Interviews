Certain applications require arbitrary precision arithmetic. One way to achieve this is to use arrays to represent integers, e.g., with one
digit per array entry,with the most significant digit appearing first, and a negative leading digit denoting a negative integer. For
example, (1,9,3, 7,0,7, 7, 2,1) represents 193707721 and (-7,6,1,8,3,8, 2,5,7, 2,8, 7) represents -761838257287.

Write a program that takes two arrays representing integers, and returns an integer representing their product. For example, since
193707721 X -761838257287 = -147573952589676412927, if the inputs are
(1,9,3, 7,0,7, 7, 2,1} and (-7,6,1,8,3,8, 2,5,7, 2,8, 7), your function should return
(-1,4, 7,5,7,3, 9,5, 2,5,8, 9,6, 7,6, 4,1, 2, 9, 2,7).

Hint: Use arrays to simulate the grade-school multiplication algorithm.

------------------Solution------------------------
                                  // author: Nabajyoti Majumdar

import java.util.ArrayList; 
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class check2 {
    public static List<Integer> multiply(List<Integer> num1,List <Integer> num2){
        final int num1_sign=num1.get(0);
        final int num2_sign=num2.get(0);
        int temp;
        if (num1_sign*num2_sign<0)   temp=-1;
        else temp=1;

        final int sign=temp;

        num1.set(0,Math.abs(num1.get(0)));
        num2.set(0,Math.abs(num2.get(0)));

        List<Integer> result=new ArrayList<>(Collections.nCopies(num1.size()+num2.size(),0));

        for (int i=num1.size()-1;i>=0;--i){
            for (int j=num2.size()-1;j>=0;j--){
                result.set(i+j+1,result.get(i+j+1)+num1.get(i)*num2.get(j));
                result.set(i+j,result.get(i+j)+result.get(i+j+1)/10);
                result.set(i+j+1,result.get(i+j+1)%10);
            }
        }

        // Remove the Leading zeros

        int first_not_zero=0;
        while (first_not_zero<result.size() && result.get(first_not_zero)==0) first_not_zero++;
        result=result.subList(first_not_zero,result.size());

        if(result.isEmpty()){
            return Arrays.asList(0);
        }
        result.set(0,result.get(0)*sign);
        return result;

    }
    public static void main(String[] args) {
        List<Integer> num1= Arrays.asList(1,9,3, 7,0,7, 7, 2,1);
        List <Integer> num2=Arrays.asList(-7,6,1,8,3,8, 2,5,7, 2,8, 7);
        List<Integer> result;
        result = multiply(num1,num2);
        System.out.println("result : " + result.toString());
    }
}



























